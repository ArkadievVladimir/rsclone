[{"D:\\rsclone\\rsclone\\twitter-front\\src\\index.tsx":"1","D:\\rsclone\\rsclone\\twitter-front\\src\\theme.ts":"2","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\store.ts":"3","D:\\rsclone\\rsclone\\twitter-front\\src\\App.tsx":"4","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\RootReducer.ts":"5","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\saga.ts":"6","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\User.tsx":"7","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Home\\Home.tsx":"8","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\sagas.ts":"9","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\reducer.ts":"10","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\sagas.ts":"11","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\actionCreators.ts":"12","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\actionCreators.ts":"13","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Home\\components\\FullTweet.tsx":"14","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\actionCreators.ts":"15","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\contracts\\state.ts":"16","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\contracts\\state.ts":"17","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\contracts\\actionTypes.ts":"18","D:\\rsclone\\rsclone\\twitter-front\\src\\services\\api\\tweetsApi.ts":"19","D:\\rsclone\\rsclone\\twitter-front\\src\\services\\api\\TagsApi.ts":"20","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\contracts\\actionTypes.ts":"21","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\selectors.ts":"22","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Home\\theme.tsx":"23","D:\\rsclone\\rsclone\\twitter-front\\src\\core\\axios.ts":"24","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\selectors.ts":"25","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\sagas.ts":"26","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\reducer.ts":"27","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\reducer.ts":"28","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\BackButton.tsx":"29","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\HashTags.tsx":"30","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\AddTweetForm.tsx":"31","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\SearchTextField.tsx":"32","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\Sidebar.tsx":"33","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\Tweet.tsx":"34","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\ModalBlock.tsx":"35","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\contracts\\state.ts":"36","D:\\rsclone\\rsclone\\twitter-front\\src\\utils\\formatDate.ts":"37","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\selectors.ts":"38","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Signin\\index.tsx":"39","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Signin\\components\\LoginModal.tsx":"40","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\Notification.tsx":"41","D:\\rsclone\\rsclone\\twitter-front\\src\\services\\api\\authApi.tsx":"42","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\types.ts":"43","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\selectors.ts":"44","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\actionCreators.ts":"45","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\contracts\\actionTypes.ts":"46","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\reducer.ts":"47","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\sagas.ts":"48","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Signin\\components\\RegisterModal.tsx":"49","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\UploadImages.tsx":"50","D:\\rsclone\\rsclone\\twitter-front\\src\\utils\\uploadImage.ts":"51","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\ImageList.tsx":"52"},{"size":575,"mtime":1610787669067,"results":"53","hashOfConfig":"54"},{"size":2816,"mtime":1610787669079,"results":"55","hashOfConfig":"54"},{"size":1006,"mtime":1610787669078,"results":"56","hashOfConfig":"54"},{"size":1711,"mtime":1610787669063,"results":"57","hashOfConfig":"54"},{"size":430,"mtime":1610787669071,"results":"58","hashOfConfig":"54"},{"size":357,"mtime":1610787669078,"results":"59","hashOfConfig":"54"},{"size":709,"mtime":1610787669069,"results":"60","hashOfConfig":"54"},{"size":5880,"mtime":1610787669068,"results":"61","hashOfConfig":"54"},{"size":807,"mtime":1610787669073,"results":"62","hashOfConfig":"54"},{"size":941,"mtime":1610787669072,"results":"63","hashOfConfig":"54"},{"size":607,"mtime":1610787669072,"results":"64","hashOfConfig":"54"},{"size":1288,"mtime":1610787669071,"results":"65","hashOfConfig":"54"},{"size":2033,"mtime":1610880031534,"results":"66","hashOfConfig":"54"},{"size":3725,"mtime":1610787669068,"results":"67","hashOfConfig":"54"},{"size":942,"mtime":1610787669073,"results":"68","hashOfConfig":"54"},{"size":386,"mtime":1610467450609,"results":"69","hashOfConfig":"70"},{"size":214,"mtime":1610464279700,"results":"71","hashOfConfig":"70"},{"size":774,"mtime":1610787669073,"results":"72","hashOfConfig":"54"},{"size":1182,"mtime":1610887262194,"results":"73","hashOfConfig":"54"},{"size":242,"mtime":1610787669070,"results":"74","hashOfConfig":"54"},{"size":2287,"mtime":1610880036325,"results":"75","hashOfConfig":"54"},{"size":714,"mtime":1610787669073,"results":"76","hashOfConfig":"54"},{"size":5941,"mtime":1610959001453,"results":"77","hashOfConfig":"54"},{"size":179,"mtime":1610787669066,"results":"78","hashOfConfig":"54"},{"size":802,"mtime":1610787669076,"results":"79","hashOfConfig":"54"},{"size":2062,"mtime":1610886643325,"results":"80","hashOfConfig":"54"},{"size":1599,"mtime":1610787669074,"results":"81","hashOfConfig":"54"},{"size":1018,"mtime":1610787669073,"results":"82","hashOfConfig":"54"},{"size":547,"mtime":1610787669064,"results":"83","hashOfConfig":"54"},{"size":1619,"mtime":1610787669064,"results":"84","hashOfConfig":"54"},{"size":4266,"mtime":1610869837764,"results":"85","hashOfConfig":"54"},{"size":940,"mtime":1610787669065,"results":"86","hashOfConfig":"54"},{"size":4575,"mtime":1610866925637,"results":"87","hashOfConfig":"54"},{"size":7148,"mtime":1610959489528,"results":"88","hashOfConfig":"54"},{"size":1446,"mtime":1610871770894,"results":"89","hashOfConfig":"54"},{"size":497,"mtime":1610878688634,"results":"90","hashOfConfig":"54"},{"size":230,"mtime":1610787669079,"results":"91","hashOfConfig":"54"},{"size":697,"mtime":1610787669072,"results":"92","hashOfConfig":"54"},{"size":5269,"mtime":1610787669069,"results":"93","hashOfConfig":"54"},{"size":5109,"mtime":1610959525493,"results":"94","hashOfConfig":"54"},{"size":1021,"mtime":1610535466347,"results":"95","hashOfConfig":"70"},{"size":996,"mtime":1610787669070,"results":"96","hashOfConfig":"54"},{"size":149,"mtime":1610787669078,"results":"97","hashOfConfig":"54"},{"size":760,"mtime":1610787669078,"results":"98","hashOfConfig":"54"},{"size":1291,"mtime":1610787669076,"results":"99","hashOfConfig":"54"},{"size":1281,"mtime":1610787669077,"results":"100","hashOfConfig":"54"},{"size":826,"mtime":1610787669077,"results":"101","hashOfConfig":"54"},{"size":1722,"mtime":1610787669077,"results":"102","hashOfConfig":"54"},{"size":8368,"mtime":1610787669069,"results":"103","hashOfConfig":"54"},{"size":2166,"mtime":1610787669066,"results":"104","hashOfConfig":"54"},{"size":487,"mtime":1610787669079,"results":"105","hashOfConfig":"54"},{"size":1069,"mtime":1610866408311,"results":"106","hashOfConfig":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"wwg0x8",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"109"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"109"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"109"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"109"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"109"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"109"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"109"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"109"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"qiikh",{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"109"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"109"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"109"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"109"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"109"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"109"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"109"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"109"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"109"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"109"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"109"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"109"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"109"},"D:\\rsclone\\rsclone\\twitter-front\\src\\index.tsx",[],["234","235"],"D:\\rsclone\\rsclone\\twitter-front\\src\\theme.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\store.ts",["236"],"import React from 'react';\nimport { compose, createStore } from 'redux';\nimport { rootReducer } from './RootReducer';\nimport createSagaMiddleware from 'redux-saga';\nimport { applyMiddleware } from 'redux';\nimport rootSaga from './saga';\nimport { TweetsState } from './ducks/tweets/contracts/state';\nimport { TagsState } from './ducks/tags/contracts/state';\nimport { TweetState } from './ducks/tweet/contracts/state';\nimport { UserState } from './ducks/user/contracts/state';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?: typeof compose;\n    }\n};\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport interface RootState {\n    tweets: TweetsState;\n    tags: TagsState;\n    tweet: TweetState;\n    user: UserState;\n}\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n","D:\\rsclone\\rsclone\\twitter-front\\src\\App.tsx",["237","238","239","240"],"import React from 'react';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport { Home } from './pages/Home/Home';\n// import { Layout } from './pages/Layout';\nimport { SignIn } from './pages/Signin';\nimport { UserPage } from './pages/User';\nimport { AuthApi } from './services/api/authApi';\nimport { fetchUserData, setUserData } from './store/ducks/user/actionCreators';\nimport { selectIsAuth, selectUserStatus } from './store/ducks/user/selectors';\nimport { LoadingStatus } from './store/types';\nimport { useHomeStyles } from './pages/Home/theme';\n\nfunction App() {\n  const classes = useHomeStyles();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const isAuth = useSelector(selectIsAuth);\n  const loadingStatus = useSelector(selectUserStatus);\n  const isReady = loadingStatus !== LoadingStatus.LOADING && loadingStatus !== LoadingStatus.NEVER;\n \n\n\n  React.useEffect(() => {\n    if(!isAuth && isReady) {\n      history.push('/signin')\n    } else {\n      history.push('/home')\n    }\n  },[isAuth, isReady])\n\n  \n\n  React.useEffect(() => {\n    dispatch(fetchUserData())\n  },[])\n\n  if(!isReady) {\n    return (\n      <div className={classes.centered}>\n        <TwitterIcon color='primary' style={{width: 80, height: 80}}/>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/signin\" component={SignIn} />\n        {/* <Layout> */}\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/user\" component={UserPage} />\n        {/* </Layout> */}\n        \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\RootReducer.ts",["241"],"import React from 'react';\nimport { combineReducers } from 'redux';\nimport { tweetReducer } from './ducks/tweet/reducer';\nimport { tweetsReducer } from './ducks/tweets/reducer';\nimport { TagsReducer } from './ducks/tags/reducer';\nimport { userReducer } from './ducks/user/reducer';\n\n\nexport const rootReducer = combineReducers({\n    tweets: tweetsReducer,\n    tags: TagsReducer,\n    tweet: tweetReducer,\n    user: userReducer\n});\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\saga.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\User.tsx",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Home\\Home.tsx",["242"],"import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { Tweet } from '../../components/Tweet';\nimport { \n    Grid, \n    InputAdornment,\n    Paper,\n    Typography,\n    Container,\n    ListItem,\n    Divider,\n    ListItemAvatar,\n    Avatar,\n    ListItemText,\n    List,\n    Button,\n    IconButton,\n    } from '@material-ui/core';\nimport { Sidebar } from '../../components/Sidebar';\nimport SearchIcon from '@material-ui/icons/SearchOutlined';\nimport PersonAddIcon from '@material-ui/icons/PersonAddOutlined';\nimport { AddTweetForm } from '../../components/AddTweetForm';\nimport { useHomeStyles } from './theme';\nimport { SearchTextField } from '../../components/SearchTextField';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsTweetsLoading, selectTweetsItems } from '../../store/ducks/tweets/selectors';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Tags } from '../../components/HashTags';\nimport { BackButton } from '../../components/BackButton';\nimport { FullTweet } from './components/FullTweet';\nimport { fetchTweets } from '../../store/ducks/tweets/actionCreators';\nimport { fetchTags } from '../../store/ducks/tags/actionCreators';\n\n\nexport const Home = (): React.ReactElement => {\n    const classes = useHomeStyles();\n    const dispatch = useDispatch();\n    const tweets = useSelector(selectTweetsItems);\n    const isLoading = useSelector(selectIsTweetsLoading);\n\n    useEffect(() => {\n        dispatch(fetchTweets());\n        dispatch(fetchTags());\n    }, [dispatch])\n\n    return (\n        <Container maxWidth=\"lg\" className={classes.wrapper}>\n            <Grid container spacing={3}>\n            <Grid item sm={1} md={3}>\n               <Sidebar classes={classes} />\n            </Grid>\n            <Grid item sm={8} md={6}>\n                <Paper \n                    className={classes.tweetsWrapper}\n                    variant=\"outlined\">\n                <Paper \n                className={classes.tweetsHeader}\n                variant=\"outlined\" >\n                <Route path='/home/:any'>\n                    <BackButton />\n                </Route>\n                <Route path={['/home', '/home/search']} exact>\n                    <Typography variant=\"h6\">\n                        Твиты\n                    </Typography>  \n                </Route>\n                <Route path='/home/tweet' >\n                    <Typography variant=\"h6\">\n                        Твитнуть\n                    </Typography>  \n                </Route> \n                </Paper>\n                <Route path={['/home', '/home/search']} exact >\n                <Paper>\n                    <div className={classes.addForm}>\n                        <AddTweetForm classes={classes} rowsMax={2}/>\n                    </div>\n                    <div className={classes.addFormBottomLine}></div>\n                </Paper>\n                </Route>\n                <Route path=\"/home\" exact>\n                    {isLoading ? (\n                        <div className={classes.tweetsWrapper}>\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        tweets.map((tweet) => \n                        <Tweet\n                        key={tweet._id}\n                        classes={classes}\n                        images={tweet.images}\n                        {...tweet}\n                        />)\n                    )}\n                </Route>\n                <Route path=\"/home/tweet/:id\" component={FullTweet} exact />\n                </Paper>\n            </Grid>\n            <Grid item sm={3} md={3}>\n                <div className={classes.rightSide}>\n                    <SearchTextField\n                        fullWidth\n                        placeholder=\"Поиск по Твиттеру\"\n                        inputProps={{\n                            startadorment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            )\n                        }}\n                    />\n                    <Tags classes={classes} />\n                    <Paper className={classes.rightSideBlock}>\n                        <Paper className={classes.rightSideBlockHeader} variant=\"outlined\">\n                            <b>Кого читать</b>\n                        </Paper>\n                        <List>\n                            <ListItem className={classes.rightSideBlockItem}>\n                                <ListItemAvatar>\n                                    <Avatar\n                                    alt=\"Vitaly Zabavsky\"\n                                    src=\"https://images.unsplash.com/photo-1581803118522-7b72a50f7e9f?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80\"\n                                    />\n                                </ListItemAvatar>\n                                <ListItemText\n                                    primary=\"Dock of Shame\"\n                                    secondary={\n                                        <Typography component=\"span\" variant=\"body2\">\n                                            @FavDocOfShame\n                                        </Typography>\n                                    }\n                                />\n                                <Button color=\"primary\">\n                                    <PersonAddIcon />\n                                </Button>    \n                            </ListItem>\n                            <Divider component=\"li\" />\n                        </List>\n                    </Paper>\n                </div>\n            </Grid>\n            </Grid>\n        </Container>\n    );\n};\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\sagas.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\reducer.ts",["243"],"import React from 'react';\nimport produce from 'immer';\nimport { Draft } from 'immer';\nimport { TagsState } from './contracts/state';\nimport { TagsActions, TagsActionsType } from './actionCreators';\nimport { LoadingStatus } from '../../types';\n\nconst initialTagsState: TagsState = {\n    items: [],\n    LoadingStatus: LoadingStatus.NEVER\n}\n\nexport const TagsReducer = produce((draft: Draft<TagsState>, action: TagsActions) => {\n    switch (action.type) {\n        case TagsActionsType.SET_TAGS:\n            draft.items = action.payload;\n            draft.LoadingStatus = LoadingStatus.LOADED;\n            break;\n\n        case TagsActionsType.FETCH_TAGS:\n            draft.items = [];\n            draft.LoadingStatus = LoadingStatus.LOADING;\n            break;\n\n        case TagsActionsType.SET_LOADING_STATE:\n            draft.LoadingStatus = action.payload;\n            break;\n\n        default:\n            break;\n    }\n}, initialTagsState);\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\sagas.ts",["244"],"import { call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { setTags, setTagsLoadingStatus, TagsActionsType } from './actionCreators';\nimport { TagsApi } from '../../../services/api/TagsApi';\nimport { LoadingStatus } from '../../types';\n\n \nexport function* fetchTagsRequest() {\n    try {\n        const items = yield call(TagsApi.fetchTags);\n        yield put(setTags(items))\n    } catch (error) {\n        yield put(setTagsLoadingStatus(LoadingStatus.ERROR));\n    }\n}\n   \n\nexport function* tagsSaga() {\n    yield takeLatest(TagsActionsType.FETCH_TAGS, fetchTagsRequest);\n}\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\actionCreators.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\actionCreators.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Home\\components\\FullTweet.tsx",["245","246","247","248"],"import { Paper, Avatar, Typography, IconButton } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\nimport ChatBubbleOutlineOutlinedIcon from '@material-ui/icons/ChatBubbleOutlineOutlined';\nimport RepeatOutlinedIcon from '@material-ui/icons/RepeatOutlined';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport ReplyOutlinedIcon from '@material-ui/icons/ReplyOutlined';\nimport mediumZoom from 'medium-zoom'\nimport classNames from 'classnames';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport format from 'date-fns/format';\nimport ruLang from 'date-fns/locale/ru';\nimport { fetchTweetData, setTweetData } from '../../../store/ducks/tweet/actionCreators';\nimport { selectIsTweetLoading, selectTweetData } from '../../../store/ducks/tweet/selectors';\nimport { useHomeStyles } from '../theme';\nimport { Tweet } from '../../../components/Tweet';\nimport { ImageList } from '../../../components/ImageList';\n\n\nexport const FullTweet: React.FC = (): React.ReactElement | null => {\n    const classes = useHomeStyles();\n    const dispatch = useDispatch();\n    const tweetData = useSelector(selectTweetData);\n    const isLoading = useSelector(selectIsTweetLoading);\n    const params: { id?: string } = useParams();\n    const id = params.id;\n\n    useEffect(() => {\n        if (id) {\n           dispatch(fetchTweetData(id)); \n        }   \n\n        return () => {\n            dispatch(setTweetData(undefined));\n        }\n    }, [dispatch, id]);\n\n    React.useEffect(() => {\n        if (!isLoading) {\n            mediumZoom('.tweet-images img');\n        }\n    },[isLoading])\n\n    if (isLoading) {\n        return (\n        <div className={classes.tweetsCentered} >\n            <CircularProgress />\n        </div>\n        ); \n    }\n    \n    if (tweetData) {\n        return  <Paper className={classes.fullTweet}>                   \n                <div className={classNames(classes.tweetsHeaderUser)}>\n                    <Avatar \n                        alt=\"Ava\" \n                        className={classes.tweetAvatar}\n                        src={tweetData.user.avatarUrl} \n                    />\n                    <Typography>\n                        <b>{tweetData.user.fullname}</b>&nbsp;                     \n                        <div>\n                            <span className={classes.tweetsUserName}>@{tweetData.user.username}</span>&nbsp;\n                        </div>\n                    </Typography>\n                </div> \n                <Typography variant=\"body1\" gutterBottom className={classes.fullTweetText}>\n                        {tweetData.text}\n                        <div className='tweet-images'>\n                           { tweetData.images && <ImageList classes={classes} images={tweetData.images}/>}\n                        </div>\n                </Typography>\n                <Typography>\n                    <span className={classes.tweetsUserName}>{format(new Date(tweetData.createdAt),'H:mm', {locale: ruLang})} · </span>\n                    <span className={classes.tweetsUserName}>{format(new Date(tweetData.createdAt), 'dd MMM yyyy', {locale: ruLang})}</span>\n                </Typography>\n                {/* <div className={classNames(classes.tweetFooter, classes.fullTweetFooter)}> */}\n                <div className={classNames(classes.tweetFooter)}>\n                    <IconButton color=\"primary\">\n                        <ChatBubbleOutlineOutlinedIcon style={{fontSize: 16}} />\n                    </IconButton>\n                </div>\n            </Paper>\n    }\n    \n    return null;\n};\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\actionCreators.ts",["249","250"],"import React from 'react';\nimport { FetchTweetDataActionInterface, SetTweetDataActionInterface, SetTweetLoadingStatusActionInterface, TweetActionsType } from './contracts/actionTypes';\nimport { TweetState } from './contracts/state';\nimport { Tweet } from '../tweets/contracts/state';\nimport { LoadingStatus } from '../../types';\n\n\nexport const setTweetData = (payload: TweetState['data']): SetTweetDataActionInterface => ({\n    type: TweetActionsType.SET_TWEET_DATA,\n    payload,\n});\n\nexport const setTweetLoadingStatus = (\n    payload: LoadingStatus,\n    ): SetTweetLoadingStatusActionInterface => ({\n    type: TweetActionsType.SET_LOADING_STATE,\n    payload,\n});\n\nexport const fetchTweetData = (payload: string): FetchTweetDataActionInterface => ({\n    type: TweetActionsType.FETCH_TWEET_DATA,\n    payload\n});\n\nexport type TweetActions = | SetTweetDataActionInterface | SetTweetLoadingStatusActionInterface | FetchTweetDataActionInterface;\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\contracts\\state.ts",["251"],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\contracts\\state.ts",["252"],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\contracts\\actionTypes.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\services\\api\\tweetsApi.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\services\\api\\TagsApi.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\contracts\\actionTypes.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\selectors.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Home\\theme.tsx",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\core\\axios.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\selectors.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\sagas.ts",["253"],"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { TweetsApi } from '../../../services/api/tweetsApi';\nimport { LoadingStatus } from '../../types';\nimport { AddTweet, EditTweet, setAddFormState, setTweets, setTweetsLoadingStatus } from './actionCreators';\nimport { EditTweetActionInterface, FetchAddTweetActionInterface, FetchEditTweetActionInterface, RemoveTweetActionInterface, TweetsActionsType } from './contracts/actionTypes';\nimport { AddFormState } from './contracts/state';\n\n \nexport function* fetchTweetsRequest() {\n    try {\n        const items = yield call(TweetsApi.fetchTweets);\n        yield put(setTweets(items))\n    } catch (error) {\n        yield put(setTweetsLoadingStatus(LoadingStatus.ERROR));\n    }\n}\n\nexport function* fetchAddTweetRequest({ payload }: FetchAddTweetActionInterface) {\n    try {\n        console.log('fetchAddTweetREquest payload ', payload)\n        const item = yield call(TweetsApi.addTweet, payload);\n        console.log('fetchAddTweetREquest item ', item)\n        yield put(AddTweet(item));\n    } catch (error) {\n        yield put(setAddFormState(AddFormState.ERROR));\n    }\n}\n\nexport function* fetchEditTweetRequest({ payload }: FetchEditTweetActionInterface) {\n    try {\n        console.log(payload)\n        const item = yield call(TweetsApi.editTweet, payload);\n        console.log('item ',item)\n        yield put(EditTweet(item));\n    } catch (error) {\n        yield put(setAddFormState(AddFormState.ERROR));\n    }\n}\n\nexport function* fetchRemoveTweetRequest({ payload }: RemoveTweetActionInterface) {\n    try {\n        yield call(TweetsApi.removeTweet, payload);\n    } catch (error) {\n        alert('Ошибка при удалении!')\n    }\n}\n   \nexport function* tweetsSaga() {\n    yield takeLatest(TweetsActionsType.FETCH_TWEETS, fetchTweetsRequest);\n    yield takeLatest(TweetsActionsType.FETCH_ADD_TWEET, fetchAddTweetRequest);\n    yield takeLatest(TweetsActionsType.REMOVE_TWEET, fetchRemoveTweetRequest);\n    yield takeLatest(TweetsActionsType.FETCH_EDIT_TWEET, fetchEditTweetRequest);\n}\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\reducer.ts",["254"],"import React from 'react';\nimport produce from 'immer';\nimport { Draft } from 'immer';\nimport { AddFormState, TweetsState } from './contracts/state';\nimport { TweetsActions, TweetsActionsType } from './contracts/actionTypes';\nimport { LoadingStatus } from '../../types';\n\nconst initialTweetsState: TweetsState = {\n    items: [],\n    addFormState: AddFormState.NEVER,\n    LoadingStatus: LoadingStatus.NEVER\n}\n\nexport const tweetsReducer = produce((draft: Draft<TweetsState>, action: TweetsActions) => {\n    switch (action.type) {\n\n        case TweetsActionsType.FETCH_TWEETS:\n            draft.items = [];\n            draft.LoadingStatus = LoadingStatus.LOADING;\n            break;\n\n        case TweetsActionsType.SET_TWEETS:\n            draft.items = action.payload;\n            draft.LoadingStatus = LoadingStatus.LOADED;\n            break;\n\n\n        case TweetsActionsType.FETCH_ADD_TWEET:\n            draft.addFormState = AddFormState.LOADING;\n            break;\n            \n        case TweetsActionsType.REMOVE_TWEET:\n            draft.items = draft.items.filter(obj => obj._id !== action.payload)\n            break;\n\n        case TweetsActionsType.SET_ADD_FORM_STATE:\n            draft.addFormState = action.payload;\n            break;\n\n        case TweetsActionsType.ADD_TWEET:\n            draft.items.splice(0, 0, action.payload);\n            draft.addFormState = AddFormState.NEVER;\n            break;\n\n        case TweetsActionsType.SET_LOADING_STATE:\n            draft.LoadingStatus = action.payload;\n            break;\n\n        default:\n            break;\n    }\n}, initialTweetsState);\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweet\\reducer.ts",["255"],"import React from 'react';\nimport produce from 'immer';\nimport { Draft } from 'immer';\nimport { LoadingStatus } from '../../types'\nimport {  TweetState } from './contracts/state';\nimport { TweetActions } from './actionCreators';\nimport { TweetActionsType } from './contracts/actionTypes';\n\nconst initialTweetState: TweetState = {\n    data: undefined,\n    LoadingStatus: LoadingStatus.NEVER\n}\n\nexport const tweetReducer = produce((draft: Draft<TweetState>, action: TweetActions) => {\n    switch (action.type) {\n        case TweetActionsType.SET_TWEET_DATA:\n            draft.data = action.payload;\n            draft.LoadingStatus = LoadingStatus.LOADED;\n            break;\n\n        case TweetActionsType.FETCH_TWEET_DATA:\n            draft.data = undefined;\n            draft.LoadingStatus = LoadingStatus.LOADING;\n            break;\n\n        case TweetActionsType.SET_LOADING_STATE:\n            draft.LoadingStatus = action.payload;\n            break;\n\n        default:\n            break;\n    }\n}, initialTweetState);\n","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\BackButton.tsx",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\components\\HashTags.tsx",["256","257","258"],"import { Divider, Link, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport Paper from '@material-ui/core/Paper';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHomeStyles } from '../pages/Home/theme';\nimport { TagsState } from '../store/ducks/tags/contracts/state';\nimport { selectTagsItems, selectIsTagsLoaded } from '../store/ducks/tags/selectors';\n\n\ninterface TagsProps {\n    classes: ReturnType<typeof useHomeStyles>;\n}\n\nexport const Tags: React.FC<TagsProps> = ({\n    classes\n}: TagsProps): React.ReactElement | null => {\n    const items = useSelector(selectTagsItems);\n    const isLoaded = useSelector(selectIsTagsLoaded);\n\n    if (!isLoaded) {\n        return null;\n    }\n\n    return (\n        <Paper className={classes.rightSideBlock}>\n        <Paper className={classes.rightSideBlockHeader} variant=\"outlined\">\n            <b>Актуальные темы</b>\n        </Paper>\n    <List>\n       {\n           items.map((obj) => {\n           <React.Fragment key={obj._id}>\n            {/* <Link to={`/home/search?q=${obj.name}`}> */}\n            <ListItem className={classes.rightSideBlockItem}>\n            <ListItemText primary={obj.name}\n            secondary={\n                <Typography component=\"span\" variant=\"body2\" color=\"textSecondary\">\n                    Твитов: {obj.count}\n                </Typography>\n            }\n            />\n        </ListItem>\n        {/* </Link> */}\n        <Divider component=\"li\" />\n            </React.Fragment>\n        })\n       }\n    </List>\n    </Paper>\n    )\n}\n","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\AddTweetForm.tsx",["259","260","261"],"import React from 'react';\nimport { useState } from 'react';\nimport { useHomeStyles } from '../pages/Home/theme';\nimport classNames from 'classnames';\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\nimport EmojiIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\nimport { \n    IconButton,\n    Avatar,\n    Button,\n    TextareaAutosize,\n    CircularProgress,\n    } from '@material-ui/core';  \nimport Alert from '@material-ui/lab/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAddTweet, setAddFormState } from '../store/ducks/tweets/actionCreators';\nimport { selectAddFormState } from '../store/ducks/tweets/selectors';\nimport { AddFormState } from '../store/ducks/tweets/contracts/state';\nimport { UploadImages } from './UploadImages';\nimport { uploadImage } from '../utils/uploadImage';\n\ninterface AddTweetFormProps {\n    classes: ReturnType<typeof useHomeStyles>;\n    rowsMax?: number;\n}    \n\nexport interface ImageObj {\n    file: File;\n    blobUrl: string;\n}\n\nexport const AddTweetForm: React.FC<AddTweetFormProps> = ({classes, rowsMax}: AddTweetFormProps): React.ReactElement => {\n    const dispatch = useDispatch();\n    const addFormState = useSelector(selectAddFormState)\n    const [text, setText] = useState<string>('');\n    const [images, setImages] = React.useState<ImageObj[]>([])\n    const percentOfTextInTweet: number = Math.round((text.length / 200) * 100);\n    const maxTweetSymbols: number = 200;\n\n    const handlerChangeTextarea = (e: React.FormEvent<HTMLTextAreaElement>): void => {\n        if (e.currentTarget && e.currentTarget.value.length <= maxTweetSymbols) {\n            setText(e.currentTarget.value);\n        };\n    };\n\n    const handlerAddTweetOnClick = async (): Promise<void> => {\n        let result = []\n        dispatch(setAddFormState(AddFormState.LOADING))\n        for (let i = 0; i < images.length; i++) {\n            let file = images[i].file;\n            const { url } = await uploadImage(file)\n            result.push(url);\n        }\n        dispatch(fetchAddTweet({text, images: result}));\n        setText('');\n        setImages([])\n    };\n    \n    return (\n        <div>\n        <div className={classes.addFormBody}>\n            <Avatar className={classes.tweetAvatar}\n            alt='ava'\n            src=\"https://images.unsplash.com/photo-1584799235813-aaf50775698c?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=675&q=80\"\n            />\n        <TextareaAutosize\n            onChange={handlerChangeTextarea}\n            rowsMax={rowsMax}\n            value={text}\n            className={classes.addFormTextArea}\n            placeholder=\"Оставить твит\"\n        />        \n        </div>\n        <div className={classes.addFormBottom}>\n            <div className={classNames(classes.tweetFooter, classes.addFormBottomActions)}>\n                <UploadImages images={images} onChangeImages={setImages}/>\n            </div>\n            <div className={classes.addFormBottomRight}>\n                {text && (\n                    <>\n                    <span>{text.length} /</span>\n                    <span>{maxTweetSymbols}</span>\n                    <div className={classes.addFormCircleProgress}>\n                        <CircularProgress variant=\"determinate\" style={text.length >= maxTweetSymbols ? {color:'rgb(255, 0, 0)'} : {}}\n                         size={20} thickness={4} value={text.length >= maxTweetSymbols ? 100 : percentOfTextInTweet} />\n                        <CircularProgress variant=\"determinate\" size={20} thickness={4} value={100} \n                        style={{color: 'rgba(0, 0, 0, 0.1'}} />\n                    </div>\n                    </>\n                )}\n             \n                <Button disabled={!text || text.length > maxTweetSymbols || addFormState === AddFormState.LOADING} color=\"primary\" variant=\"contained\"\n                    onClick={handlerAddTweetOnClick} > {addFormState === AddFormState.LOADING ? <CircularProgress size={18} color=\"inherit\" /> : 'Твитнуть' }\n                </Button>\n            </div>\n        </div>\n        {addFormState === AddFormState.ERROR && (\n            <Alert severity=\"error\">Ошибка</Alert>\n        )} \n    </div>\n    );\n};\n","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\SearchTextField.tsx",["262"],"import React from 'react';\nimport { TextField, Theme, withStyles } from '@material-ui/core';\n\n\nexport const SearchTextField = withStyles((theme: Theme) => ({\n    root: {\n        '& .MuiOutlinedInput-root': {\n            backgroundColor: '#e6ecf0',\n            borderRadius: 30,\n            padding: 0,\n            paddinfLeft: 15,\n            '& .Mui-focused': {\n                backgroundColor: '#fff',\n                '& fieldset': {\n                    borderWidth: 1,\n                    borderColor: theme.palette.primary.main\n                },\n                '& svg path': {\n                    fill: theme.palette.primary.main\n                }\n            },\n        '&:hover': {\n            '& fieldset': {\n                borderColor: 'transparent',\n                borderWidth: 1\n            }\n        },\n        '& .MuiOutlinedInput-input': {\n            padding: '10px 15px 15px 5px'\n        }\n        }\n    }\n}))(TextField)\n","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\Sidebar.tsx",["263"],"import React from 'react';\nimport { useState } from 'react';\nimport { \n    Button,\n    IconButton,\n    Hidden,\n    Typography,\n    Link,\n    } from '@material-ui/core';\nimport { useHomeStyles } from '../pages/Home/theme';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport SearchIcon from '@material-ui/icons/Search';\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone';\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport ListAltIcon from '@material-ui/icons/ListAlt';\nimport PermIdentityOutlinedIcon from '@material-ui/icons/PermIdentityOutlined';\nimport CreateIcon from '@material-ui/icons/Create';\nimport { ModalBlock } from './ModalBlock';\nimport { AddTweetForm } from './AddTweetForm';\n\n\ninterface SidebarProps {\n    classes: ReturnType<typeof useHomeStyles>;\n}\n\nexport const Sidebar: React.FC<SidebarProps> = ({classes}): React.ReactElement => {\n    const [tweet, setTweet] = useState<boolean>(false);\n\n    const handlerAddTweet = () => {\n        setTweet(false);\n    };\n\n    const handlerOnClickOpenSetTweet = () => {\n        setTweet(true);\n    };\n    \n    return (\n    <ul className={classes.sideMenuList}> \n        <li className={classes.sideMenuListItem}>\n            {/* <Link to=\"/home\"> */}\n            <IconButton className={classes.logo} aria-label=\"\" color=\"primary\">\n                <TwitterIcon  className={classes.logoIcon}/>\n            </IconButton>\n            {/* </Link> */}\n        </li>\n        <li className={classes.sideMenuListItem}>\n            <div>\n                <SearchIcon  className={classes.sideMenuListItemIcon}/>\n                <Hidden smDown>\n                    <Typography className={classes.sideMenuListItemLabel} variant=\"h6\">\n                        Поиск\n                    </Typography>\n                </Hidden>\n            </div>        \n        </li>\n        <li className={classes.sideMenuListItem}>\n            <div>\n                <NotificationsNoneIcon  className={classes.sideMenuListItemIcon}/>\n                <Hidden smDown>\n                    <Typography className={classes.sideMenuListItemLabel} variant=\"h6\">\n                        Уведомления\n                    </Typography>\n                </Hidden>\n            </div>\n        </li>\n        <li className={classes.sideMenuListItem}>\n            <div>\n                <MailOutlineIcon  className={classes.sideMenuListItemIcon}/>\n                <Hidden smDown>\n                    <Typography className={classes.sideMenuListItemLabel} variant=\"h6\">\n                        Сообщения\n                    </Typography>\n                </Hidden>\n            </div>\n        </li>\n        <li className={classes.sideMenuListItem}>\n            <div>\n                <BookmarkBorderIcon  className={classes.sideMenuListItemIcon}/>\n                <Hidden smDown>\n                    <Typography className={classes.sideMenuListItemLabel} variant=\"h6\">\n                        Закладки\n                    </Typography>\n                </Hidden>\n            </div>\n        </li>\n        <li className={classes.sideMenuListItem}>\n            <div>\n                <ListAltIcon  className={classes.sideMenuListItemIcon}/>\n                <Hidden smDown>\n                    <Typography className={classes.sideMenuListItemLabel} variant=\"h6\">\n                        Список\n                    </Typography>\n                </Hidden>\n            </div>\n        </li>\n        <li className={classes.sideMenuListItem}>\n            <div>\n                <PermIdentityOutlinedIcon  className={classes.sideMenuListItemIcon}/>\n                <Hidden smDown>\n                    <Typography className={classes.sideMenuListItemLabel} variant=\"h6\">\n                        Профиль\n                    </Typography>\n                </Hidden>\n            </div>\n        </li>\n        <li className={classes.sideMenuListItem}>\n            <Button onClick={handlerOnClickOpenSetTweet} className={classes.sideMenuTweetBtn} variant=\"contained\" color=\"primary\" fullWidth>\n                <Hidden smDown>Твитнуть</Hidden> \n                <Hidden mdUp>\n                    <CreateIcon />\n                </Hidden>\n            </Button>\n            <ModalBlock title='' visible={tweet} onClose={handlerAddTweet}>\n                <div style={{width: 500}}>\n                    <AddTweetForm classes={classes} rowsMax={5} />\n                </div>\n            </ModalBlock>\n        </li>\n    </ul>         \n    )\n}","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\Tweet.tsx",["264","265","266","267","268","269","270","271","272","273","274"],"D:\\rsclone\\rsclone\\twitter-front\\src\\components\\ModalBlock.tsx",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tweets\\contracts\\state.ts",["275"],"import React from 'react';\nimport { LoadingStatus } from '../../../types';\n\n\n\nexport enum AddFormState {\n    LOADING = \"LOADING\",\n    ERROR = \"ERROR\",\n    NEVER = \"NEVER\"\n}\n\n\nexport interface Tweet {\n    _id: string;\n    text: string;\n    images?: [];\n    createdAt: string;\n    user: {\n        fullname: string;\n        username: string;\n        avatarUrl: string;\n    }   \n}\n\nexport interface TweetsState {\n    items: Tweet[];\n    LoadingStatus: LoadingStatus;\n    addFormState: AddFormState;\n}\n","D:\\rsclone\\rsclone\\twitter-front\\src\\utils\\formatDate.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\tags\\selectors.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Signin\\index.tsx",["276","277","278","279"],"import { \n    makeStyles, \n    Typography, \n    Button,\n    FormGroup,\n    FormControl,\n    TextField\n    } from '@material-ui/core';\nimport React from 'react';\nimport { useState } from 'react';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport SearchIcon from '@material-ui/icons/Search';\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\nimport ChatBubbleOutlineOutlinedIcon from '@material-ui/icons/ChatBubbleOutlineOutlined';\nimport { ModalBlock } from '../../components/ModalBlock';\nimport { LoginModal } from './components/LoginModal';\nimport { RegisterModal } from './components/RegisterModal';\n\nexport const useStylesSignIn = makeStyles((theme) => ({\n    wrapper: {\n       display: 'flex',\n       height: '100vh'\n    },\n    blueSide: {\n        position: 'relative',\n        backgroundColor: '#71c9f8',\n        flex: '0 0 50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden'\n    },\n    blueSideBigIcon: {\n        position: 'absolute',\n        left: '50%',\n        top: '53%',\n        transform: 'translate(-50%, -50%)',\n        width: '250%',\n        height: '250%'\n    },\n    blueSideListInfo: {\n        position: 'relative',\n        listStyle: 'none',\n        padding: 0,\n        margin: 0,\n        width: 380,\n        '& h6': {\n            display: 'flex',\n            alignItems: 'center',\n            color: 'white',\n            fontWeight: 700,\n            fontSize: 20,\n        }\n    },\n    blueSideListInfoIcons: {\n        fontSize: 32,\n        marginRight: 15\n    },\n    blueSideListInfoItem: {\n        marginBottom: 40\n    },\n    loginSide: {\n        flex: '0 0 50%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden'\n    },\n    loginSideTwitterIcon: {\n        fontSize: 45\n    },\n    loginSideWrapper: {\n        width: 380\n    },\n    loginSideTitle: {\n        fontWeight: 700,\n        fontSize: 32,\n        marginBottom: 60,\n        marginTop: 20\n    },\n    loginSideField: {\n        marginBottom: 18\n    },\n    registerField: {\n        marginBottom: theme.spacing(5)\n    },\n    loginFormControl: {\n        marginBottom: theme.spacing(3)\n    }\n}));\n\nexport const SignIn: React.FC = (): React.ReactElement => {\n    const classes = useStylesSignIn();\n\n    const [visibleModal, setVisibleModal] = useState<'signIn' | 'signOut' | 'signUp'>();\n    \n    const handleClickOpenSignIn = (): void => {\n        setVisibleModal('signIn');\n    };\n\n    const handleClickOpenSignUp = (): void => {\n        setVisibleModal('signUp');\n    };\n\n    const handleCloseModal = (): void => {\n        setVisibleModal(undefined);\n    };\n\n    return (\n        <div className={classes.wrapper}>\n            <section className={classes.blueSide}>\n            <TwitterIcon color=\"primary\" className={classes.blueSideBigIcon} />\n                <ul className={classes.blueSideListInfo}>\n                    <li className={classes.blueSideListInfoItem}>\n                        <Typography variant=\"h6\">\n                            <SearchIcon className={classes.blueSideListInfoIcons}/>\n                            Читайте о том, что Вам интересно</Typography>\n                    </li>\n                    <li className={classes.blueSideListInfoItem}>\n                        <Typography variant=\"h6\">\n                            <PeopleOutlineIcon className={classes.blueSideListInfoIcons}/>\n                            Узнайте о чем говорят в мире.</Typography>\n                    </li>\n                    <li className={classes.blueSideListInfoItem}>\n                        <Typography variant=\"h6\">\n                            <ChatBubbleOutlineOutlinedIcon className={classes.blueSideListInfoIcons}/>\n                            Присоединяйтесь к общению</Typography>\n                    </li>\n                </ul>\n            </section>\n            <section className={classes.loginSide}>\n                <div className={classes.loginSideWrapper}>\n                    <TwitterIcon color=\"primary\" className={classes.loginSideTwitterIcon} />\n                    <Typography  gutterBottom className={classes.loginSideTitle} variant=\"h4\">\n                        Узнайте, что происходит в мире прямо сейчас\n                    </Typography>\n                    <Typography>\n                        <b>Присоединяйтесь к Твиттеру прямо сейчас!</b>\n                    </Typography>\n                    <br />\n                    <Button onClick={ handleClickOpenSignUp } style={{ marginBottom: 20}} variant=\"contained\" color=\"primary\" fullWidth>\n                        Зарегистрироваться\n                    </Button>\n                    <Button onClick={ handleClickOpenSignIn } variant=\"outlined\" color=\"primary\" fullWidth>\n                        Войти\n                    </Button>\n                    <LoginModal open={visibleModal === 'signIn'} onClose={handleCloseModal}/>\n                    <RegisterModal open={visibleModal === 'signUp'} onClose={handleCloseModal}/>\n                </div>\n            </section>\n        </div>\n    )\n}\n","D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Signin\\components\\LoginModal.tsx",["280","281","282"],"D:\\rsclone\\rsclone\\twitter-front\\src\\components\\Notification.tsx",[],["283","284"],"D:\\rsclone\\rsclone\\twitter-front\\src\\services\\api\\authApi.tsx",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\types.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\selectors.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\actionCreators.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\contracts\\actionTypes.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\reducer.ts",["285"],"import React from 'react';\nimport produce from 'immer';\nimport { Draft } from 'immer';\nimport { UserActions } from './actionCreators'\nimport {  UserActionsType } from './contracts/actionTypes';\nimport { LoadingStatus } from '../../types';\nimport { UserState } from './contracts/state';\n\nconst initialUserState: UserState = {\n    data: undefined,\n    status: LoadingStatus.NEVER\n}\n\nexport const userReducer = produce((draft: Draft<UserState>, action: UserActions) => {\n    switch (action.type) {\n\n        case UserActionsType.SET_USER_DATA:\n            draft.data = action.payload;\n            draft.status = LoadingStatus.SUCCESS;\n            break;\n\n        case UserActionsType.SET_LOADING_STATE:\n            draft.status = action.payload;\n            break;\n\n        default:\n            break;\n    }\n}, initialUserState);\n","D:\\rsclone\\rsclone\\twitter-front\\src\\store\\ducks\\user\\sagas.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\pages\\Signin\\components\\RegisterModal.tsx",["286","287","288"],"import Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport React from 'react';\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport { useStylesSignIn } from '..';\r\nimport { ModalBlock } from '../../../components/ModalBlock';\r\nimport { AuthApi } from '../../../services/api/authApi';\r\nimport { Notification } from '../../../components/Notification'\r\nimport { Color } from '@material-ui/lab';\r\nimport { fetchSignUp } from '../../../store/ducks/user/actionCreators';\r\nimport { selectUserStatus } from '../../../store/ducks/user/selectors';\r\nimport { LoadingStatus } from '../../../store/types';\r\n\r\n\r\ninterface RegisterModalProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\nexport interface RegisterFormProps {\r\n    email: string;\r\n    fullname: string;\r\n    username: string;\r\n    password: string;\r\n    password2: string;\r\n}\r\n\r\nconst RegisterFormSchema = yup.object().shape({\r\n    email: yup.string().email(\"Неверно введена почта\").required(\"Введите почту\"),\r\n    username: yup.string().required(\"Введите логин\"),\r\n    fullname: yup.string().required(\"Введите полное имя\"),\r\n    password: yup.string().min(6, \"Минимальная длина пароля 6 символов\").required(\"Введите пароль\"),\r\n    password2: yup.string().oneOf([yup.ref('password')], 'Пароль не совпадает'),\r\n  });\r\n\r\n\r\nexport const RegisterModal: React.FC<RegisterModalProps> = ({ open, onClose }): React.ReactElement => {\r\n    const dispatch = useDispatch();\r\n    const loadingStatus = useSelector(selectUserStatus);\r\n    const openNotificationRef = React.useRef<(text: string, type: Color) => void>(() => {});\r\n    const classes = useStylesSignIn();\r\n    const { control, handleSubmit, errors } = useForm<RegisterFormProps>({\r\n        resolver: yupResolver(RegisterFormSchema)\r\n      });\r\n    const onSubmit = async (data: RegisterFormProps) => {\r\n        dispatch(fetchSignUp(data))\r\n\r\n    }\r\n\r\n    React.useEffect( () => {\r\n        if (loadingStatus === LoadingStatus.SUCCESS){\r\n            openNotificationRef.current('Регистрация успешно завершена', 'success');\r\n            onClose();\r\n        } else if (loadingStatus === LoadingStatus.ERROR) {\r\n            openNotificationRef.current('Произошла ошибка при регистрации', 'error')\r\n        }\r\n    }, [loadingStatus])\r\n\r\n    return (\r\n        <ModalBlock\r\n                     title=\"Зарегистрироваться\"\r\n                     onClose={onClose}\r\n                     visible={open}\r\n                     classes={classes}\r\n                    >\r\n                        <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <FormControl className={classes.loginFormControl} component=\"fieldset\" fullWidth>\r\n                            <FormGroup aria-label=\"position\" row>\r\n                            <Controller\r\n                            as={TextField}\r\n                                name=\"email\"\r\n                                control={control}\r\n                                defaultValue=\"\"\r\n                                //render={({ onChange, value }) => <input onChange={onChange} value={value} />}\r\n                                className={classes.registerField}\r\n                                autoFocus\r\n                                error={!!errors.email}\r\n                                helperText={errors.email?.message}\r\n                                id=\"email\"\r\n                                label=\"E-Mail\"\r\n                                type=\"email\"\r\n                                variant=\"filled\"\r\n                                InputLabelProps={{\r\n                                    shrink: true\r\n                                }}\r\n                                fullWidth \r\n                            />\r\n                            <Controller\r\n                            as={TextField}\r\n                                name=\"fullname\"\r\n                                control={control}\r\n                                defaultValue=\"\"\r\n                                //render={({ onChange, value }) => <input onChange={onChange} value={value} />}\r\n                                className={classes.registerField}\r\n                                autoFocus\r\n                                error={!!errors.fullname}\r\n                                helperText={errors.fullname?.message}\r\n                                id=\"fullname\"\r\n                                label=\"Имя\"\r\n                                type=\"fullname\"\r\n                                variant=\"filled\"\r\n                                InputLabelProps={{\r\n                                    shrink: true\r\n                                }}\r\n                                fullWidth \r\n                            />\r\n                            <Controller\r\n                            as={TextField}\r\n                                name=\"username\"\r\n                                control={control}\r\n                                defaultValue=\"\"\r\n                                //render={({ onChange, value }) => <input onChange={onChange} value={value} />}\r\n                                className={classes.registerField}\r\n                                autoFocus\r\n                                error={!!errors.username}\r\n                                helperText={errors.username?.message}\r\n                                id=\"username\"\r\n                                label=\"Логин\"\r\n                                type=\"usernamel\"\r\n                                variant=\"filled\"\r\n                                InputLabelProps={{\r\n                                    shrink: true\r\n                                }}\r\n                                fullWidth \r\n                            />\r\n                            <Controller\r\n                                as={TextField}\r\n                                control={control}\r\n                                error={!!errors.password}\r\n                                helperText={errors.password?.message}\r\n                                defaultValue=\"\"\r\n                                name=\"password\"\r\n                                className={classes.registerField}\r\n                                id=\"password\"\r\n                                label=\"Пароль\"\r\n                                type=\"password\"\r\n                                variant=\"filled\"\r\n                                InputLabelProps={{\r\n                                    shrink: true\r\n                                }}\r\n                                fullWidth \r\n                            />\r\n                            <Controller\r\n                                as={TextField}\r\n                                control={control}\r\n                                error={!!errors.password2}\r\n                                helperText={errors.password2?.message}\r\n                                defaultValue=\"\"\r\n                                name=\"password2\"\r\n                                className={classes.registerField}\r\n                                id=\"password2\"\r\n                                label=\"Подтвердите пароль\"\r\n                                type=\"password\"\r\n                                variant=\"filled\"\r\n                                InputLabelProps={{\r\n                                    shrink: true\r\n                                }}\r\n                                fullWidth \r\n                            />\r\n                             \r\n                                <Button disabled={loadingStatus === LoadingStatus.LOADING} type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>\r\n                                    Зарегистрироваться\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                        </form>\r\n                    </ModalBlock>\r\n    )\r\n}\r\n\r\n","D:\\rsclone\\rsclone\\twitter-front\\src\\components\\UploadImages.tsx",["289","290","291","292"],"import { IconButton } from '@material-ui/core';\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport React from 'react';\r\nimport { useHomeStyles } from '../pages/Home/theme';\r\nimport { ImageObj } from './AddTweetForm';\r\nimport { ImageList } from './ImageList';\r\n \r\ninterface UploadImageProps {\r\n    images: ImageObj[];\r\n    onChangeImages: (callback: (prev: ImageObj[]) => ImageObj[]) => void;\r\n}\r\n\r\nexport const UploadImages: React.FC<UploadImageProps> = ({ images, onChangeImages }) => {\r\n    const classes = useHomeStyles()\r\n    \r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n\r\n    const handleClickImage = () => {\r\n        if (inputRef.current) {\r\n            inputRef.current.click()\r\n        }\r\n    };\r\n\r\n    const handleChangeFileInput = React.useCallback((event: Event) => {\r\n        if (event.target) {\r\n            const target = event.target as HTMLInputElement;\r\n             const file = target.files?.[0];\r\n            if (file) {\r\n                 const fileObj = new Blob([file]);\r\n                 onChangeImages(prev => [...prev, {\r\n                     blobUrl: URL.createObjectURL(fileObj),\r\n                     file\r\n                 }])\r\n            }\r\n        }\r\n    }, [])\r\n    \r\n    const removeImage = (url: string) => {\r\n        onChangeImages(prev => prev.filter((obj) => obj.blobUrl !== url))\r\n    }\r\n \r\n    React.useEffect(() => {\r\n        if (inputRef.current) {\r\n            inputRef.current.addEventListener('change', handleChangeFileInput)\r\n        }\r\n        return () => {\r\n            if (inputRef.current) {\r\n                inputRef.current.removeEventListener('change', handleChangeFileInput)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <ImageList images={images.map((obj) => obj.blobUrl)} classes={classes} removeImage={removeImage} />\r\n            <IconButton onClick={handleClickImage} color=\"primary\"> \r\n                <ImageOutlinedIcon style={{ fontSize: 26 }} />\r\n            </IconButton> \r\n            <input ref={inputRef} type='file' id='upload-input' hidden/>\r\n        </div>\r\n    )\r\n}\r\n","D:\\rsclone\\rsclone\\twitter-front\\src\\utils\\uploadImage.ts",[],"D:\\rsclone\\rsclone\\twitter-front\\src\\components\\ImageList.tsx",["293","294"],"import React from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { useHomeStyles } from '../pages/Home/theme';\r\nimport { ImageObj } from './AddTweetForm';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\n\r\ninterface ImageListProps {\r\n    images: string[];\r\n    classes: ReturnType<typeof useHomeStyles>;\r\n    removeImage?: (url: string) => void;\r\n}\r\n\r\nexport const ImageList: React.FC<ImageListProps> = ({ classes, images, removeImage }) => {\r\n    if (!images.length) {\r\n        return null\r\n    }\r\n    return (\r\n        <div className={classes.imagesList}>\r\n        {images.map((url) => (\r\n            <div className={classes.imagesListItem}>\r\n                {removeImage && (\r\n                <IconButton\r\n                 onClick={(): void => removeImage(url)} \r\n                 className={classes.imagesListItemRemove}>\r\n                <ClearIcon  style={{fontSize: 18}} />\r\n                </IconButton>\r\n                )}\r\n                <img key={url} src={url} />\r\n            </div>\r\n            \r\n        ))}\r\n    </div>\r\n    )\r\n}",{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"303","line":9,"column":10,"nodeType":"301","messageId":"302","endLine":9,"endColumn":17},{"ruleId":"299","severity":1,"message":"304","line":10,"column":25,"nodeType":"301","messageId":"302","endLine":10,"endColumn":36},{"ruleId":"305","severity":1,"message":"306","line":31,"column":5,"nodeType":"307","endLine":31,"endColumn":22,"suggestions":"308"},{"ruleId":"305","severity":1,"message":"309","line":37,"column":5,"nodeType":"307","endLine":37,"endColumn":7,"suggestions":"310"},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"311","line":18,"column":5,"nodeType":"301","messageId":"302","endLine":18,"endColumn":15},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"312","line":2,"column":8,"nodeType":"301","messageId":"302","endLine":2,"endColumn":13},{"ruleId":"299","severity":1,"message":"313","line":4,"column":8,"nodeType":"301","messageId":"302","endLine":4,"endColumn":26},{"ruleId":"299","severity":1,"message":"314","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":34},{"ruleId":"299","severity":1,"message":"315","line":6,"column":8,"nodeType":"301","messageId":"302","endLine":6,"endColumn":25},{"ruleId":"299","severity":1,"message":"316","line":17,"column":10,"nodeType":"301","messageId":"302","endLine":17,"endColumn":15},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"316","line":4,"column":10,"nodeType":"301","messageId":"302","endLine":4,"endColumn":15},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"317","line":5,"column":10,"nodeType":"301","messageId":"302","endLine":5,"endColumn":34},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"318","line":1,"column":19,"nodeType":"301","messageId":"302","endLine":1,"endColumn":23},{"ruleId":"299","severity":1,"message":"319","line":7,"column":10,"nodeType":"301","messageId":"302","endLine":7,"endColumn":19},{"ruleId":"320","severity":1,"message":"321","line":32,"column":28,"nodeType":"322","messageId":"323","endLine":32,"endColumn":30},{"ruleId":"299","severity":1,"message":"324","line":5,"column":8,"nodeType":"301","messageId":"302","endLine":5,"endColumn":25},{"ruleId":"299","severity":1,"message":"325","line":6,"column":8,"nodeType":"301","messageId":"302","endLine":6,"endColumn":17},{"ruleId":"299","severity":1,"message":"311","line":8,"column":5,"nodeType":"301","messageId":"302","endLine":8,"endColumn":15},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"318","line":8,"column":5,"nodeType":"301","messageId":"302","endLine":8,"endColumn":9},{"ruleId":"299","severity":1,"message":"318","line":11,"column":10,"nodeType":"301","messageId":"302","endLine":11,"endColumn":14},{"ruleId":"299","severity":1,"message":"326","line":14,"column":10,"nodeType":"301","messageId":"302","endLine":14,"endColumn":19},{"ruleId":"299","severity":1,"message":"327","line":14,"column":50,"nodeType":"301","messageId":"302","endLine":14,"endColumn":65},{"ruleId":"299","severity":1,"message":"328","line":16,"column":10,"nodeType":"301","messageId":"302","endLine":16,"endColumn":22},{"ruleId":"299","severity":1,"message":"329","line":17,"column":10,"nodeType":"301","messageId":"302","endLine":17,"endColumn":22},{"ruleId":"299","severity":1,"message":"330","line":17,"column":24,"nodeType":"301","messageId":"302","endLine":17,"endColumn":32},{"ruleId":"299","severity":1,"message":"331","line":19,"column":10,"nodeType":"301","messageId":"302","endLine":19,"endColumn":26},{"ruleId":"299","severity":1,"message":"332","line":20,"column":10,"nodeType":"301","messageId":"302","endLine":20,"endColumn":22},{"ruleId":"299","severity":1,"message":"333","line":21,"column":10,"nodeType":"301","messageId":"302","endLine":21,"endColumn":21},{"ruleId":"299","severity":1,"message":"334","line":22,"column":10,"nodeType":"301","messageId":"302","endLine":22,"endColumn":22},{"ruleId":"299","severity":1,"message":"312","line":23,"column":8,"nodeType":"301","messageId":"302","endLine":23,"endColumn":13},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"335","line":5,"column":5,"nodeType":"301","messageId":"302","endLine":5,"endColumn":14},{"ruleId":"299","severity":1,"message":"336","line":6,"column":5,"nodeType":"301","messageId":"302","endLine":6,"endColumn":16},{"ruleId":"299","severity":1,"message":"337","line":7,"column":5,"nodeType":"301","messageId":"302","endLine":7,"endColumn":14},{"ruleId":"299","severity":1,"message":"338","line":15,"column":10,"nodeType":"301","messageId":"302","endLine":15,"endColumn":20},{"ruleId":"299","severity":1,"message":"303","line":12,"column":10,"nodeType":"301","messageId":"302","endLine":12,"endColumn":17},{"ruleId":"299","severity":1,"message":"339","line":13,"column":10,"nodeType":"301","messageId":"302","endLine":13,"endColumn":22},{"ruleId":"305","severity":1,"message":"340","line":54,"column":8,"nodeType":"307","endLine":54,"endColumn":23,"suggestions":"341"},{"ruleId":"295","replacedBy":"342"},{"ruleId":"297","replacedBy":"343"},{"ruleId":"299","severity":1,"message":"300","line":1,"column":8,"nodeType":"301","messageId":"302","endLine":1,"endColumn":13},{"ruleId":"299","severity":1,"message":"303","line":12,"column":10,"nodeType":"301","messageId":"302","endLine":12,"endColumn":17},{"ruleId":"299","severity":1,"message":"339","line":13,"column":10,"nodeType":"301","messageId":"302","endLine":13,"endColumn":22},{"ruleId":"305","severity":1,"message":"340","line":61,"column":8,"nodeType":"307","endLine":61,"endColumn":23,"suggestions":"344"},{"ruleId":"299","severity":1,"message":"345","line":3,"column":8,"nodeType":"301","messageId":"302","endLine":3,"endColumn":17},{"ruleId":"305","severity":1,"message":"346","line":37,"column":8,"nodeType":"307","endLine":37,"endColumn":10,"suggestions":"347"},{"ruleId":"305","severity":1,"message":"348","line":49,"column":26,"nodeType":"301","endLine":49,"endColumn":33},{"ruleId":"305","severity":1,"message":"349","line":52,"column":8,"nodeType":"307","endLine":52,"endColumn":10,"suggestions":"350"},{"ruleId":"299","severity":1,"message":"330","line":4,"column":10,"nodeType":"301","messageId":"302","endLine":4,"endColumn":18},{"ruleId":"351","severity":1,"message":"352","line":29,"column":17,"nodeType":"353","endLine":29,"endColumn":44},"no-native-reassign",["354"],"no-negated-in-lhs",["355"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'AuthApi' is defined but never used.","'setUserData' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["356"],"React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["357"],"'IconButton' is defined but never used.","'axios' is defined but never used.","'RepeatOutlinedIcon' is defined but never used.","'FavoriteBorderOutlinedIcon' is defined but never used.","'ReplyOutlinedIcon' is defined but never used.","'Tweet' is defined but never used.","'EditTweetActionInterface' is defined but never used.","'Link' is defined but never used.","'TagsState' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ImageOutlinedIcon' is defined but never used.","'EmojiIcon' is defined but never used.","'EditTweet' is defined but never used.","'setAddFormState' is defined but never used.","'eventChannel' is defined but never used.","'AddTweetForm' is defined but never used.","'ImageObj' is defined but never used.","'CircularProgress' is defined but never used.","'AddFormState' is defined but never used.","'uploadImage' is defined but never used.","'UploadImages' is defined but never used.","'FormGroup' is defined but never used.","'FormControl' is defined but never used.","'TextField' is defined but never used.","'ModalBlock' is defined but never used.","'Notification' is defined but never used.","React Hook React.useEffect has a missing dependency: 'onClose'. Either include it or remove the dependency array. If 'onClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["358"],["354"],["355"],["359"],"'ClearIcon' is defined but never used.","React Hook React.useCallback has a missing dependency: 'onChangeImages'. Either include it or remove the dependency array. If 'onChangeImages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["360"],"The ref value 'inputRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'inputRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook React.useEffect has a missing dependency: 'handleChangeFileInput'. Either include it or remove the dependency array.",["361"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"366","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},"Update the dependencies array to be: [history, isAuth, isReady]",{"range":"373","text":"374"},"Update the dependencies array to be: [dispatch]",{"range":"375","text":"376"},"Update the dependencies array to be: [loadingStatus, onClose]",{"range":"377","text":"378"},{"range":"379","text":"378"},"Update the dependencies array to be: [onChangeImages]",{"range":"380","text":"381"},"Update the dependencies array to be: [handleChangeFileInput]",{"range":"382","text":"383"},[1133,1150],"[history, isAuth, isReady]",[1217,1219],"[dispatch]",[2228,2243],"[loadingStatus, onClose]",[2528,2543],[1281,1283],"[onChangeImages]",[1755,1757],"[handleChangeFileInput]"]